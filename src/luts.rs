use crate::constants::*;
use crate::error::TrinaryError;

pub(crate) const TRIT_SYMBOLS: [char; BASE3] = ['0', '1', '-'];

pub(crate) const TRYTE_SYMBOLS: [char; BASE3_POW3] = [
    '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',
    'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
];

pub fn trits_from_tryteindex(index: usize) -> Result<[i8; BASE3], TrinaryError> {
    if index >= BASE3_POW3 {
        return Err(TrinaryError::InvalidTryteIndex);
    }

    Ok(TRYTEINDEX_TO_TRITS[index])
}

pub(crate) fn trits_from_tryteindex_internal(index: usize) -> [i8; BASE3] {
    TRYTEINDEX_TO_TRITS[index]
}

const TRYTEINDEX_TO_TRITS: [[i8; BASE3]; BASE3_POW3] = [
    [0, 0, 0], //  0   '9'
    [1, 0, 0], //  1   'A'
    [-1, 1, 0],
    [0, 1, 0],
    [1, 1, 0],
    [-1, -1, 1],
    [0, -1, 1],
    [1, -1, 1],
    [-1, 0, 1],
    [0, 0, 1],
    [1, 0, 1],
    [-1, 1, 1],
    [0, 1, 1],
    [1, 1, 1],    // 13   'M'
    [-1, -1, -1], //-13   'N'
    [0, -1, -1],
    [1, -1, -1],
    [-1, 0, -1],
    [0, 0, -1],
    [1, 0, -1],
    [-1, 1, -1],
    [0, 1, -1],
    [1, 1, -1],
    [-1, -1, 0],
    [0, -1, 0],
    [1, -1, 0],
    [-1, 0, 0], // -1   'Z'
];

pub fn trits_from_byte(byte: u8) -> Result<[i8; MAX_NUM_TRITS_PER_BYTE], TrinaryError> {
    let index = byte as usize;

    if index >= BASE3_POW5 {
        return Err(TrinaryError::InvalidT5B1Byte);
    }

    Ok(BYTE_TO_TRITS[index])
}

pub(crate) fn trits_from_byte_internal(byte: u8) -> [i8; MAX_NUM_TRITS_PER_BYTE] {
    BYTE_TO_TRITS[byte as usize]
}

const BYTE_TO_TRITS: [[i8; MAX_NUM_TRITS_PER_BYTE]; BASE3_POW5] = [
    [0, 0, 0, 0, 0],  // 0
    [1, 0, 0, 0, 0],  // 1
    [-1, 1, 0, 0, 0], // 2 (-1 + 3)
    [0, 1, 0, 0, 0],  // 3
    [1, 1, 0, 0, 0],  // 4 ( 1 + 3)
    [-1, -1, 1, 0, 0],
    [0, -1, 1, 0, 0],
    [1, -1, 1, 0, 0],
    [-1, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [1, 0, 1, 0, 0],
    [-1, 1, 1, 0, 0],
    [0, 1, 1, 0, 0],
    [1, 1, 1, 0, 0],
    [-1, -1, -1, 1, 0],
    [0, -1, -1, 1, 0],
    [1, -1, -1, 1, 0],
    [-1, 0, -1, 1, 0],
    [0, 0, -1, 1, 0],
    [1, 0, -1, 1, 0],
    [-1, 1, -1, 1, 0],
    [0, 1, -1, 1, 0],
    [1, 1, -1, 1, 0],
    [-1, -1, 0, 1, 0],
    [0, -1, 0, 1, 0],
    [1, -1, 0, 1, 0],
    [-1, 0, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 0, 0, 1, 0],
    [-1, 1, 0, 1, 0],
    [0, 1, 0, 1, 0],
    [1, 1, 0, 1, 0],
    [-1, -1, 1, 1, 0],
    [0, -1, 1, 1, 0],
    [1, -1, 1, 1, 0],
    [-1, 0, 1, 1, 0],
    [0, 0, 1, 1, 0],
    [1, 0, 1, 1, 0],
    [-1, 1, 1, 1, 0],
    [0, 1, 1, 1, 0],
    [1, 1, 1, 1, 0],
    [-1, -1, -1, -1, 1],
    [0, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [-1, 0, -1, -1, 1],
    [0, 0, -1, -1, 1],
    [1, 0, -1, -1, 1],
    [-1, 1, -1, -1, 1],
    [0, 1, -1, -1, 1],
    [1, 1, -1, -1, 1],
    [-1, -1, 0, -1, 1],
    [0, -1, 0, -1, 1],
    [1, -1, 0, -1, 1],
    [-1, 0, 0, -1, 1],
    [0, 0, 0, -1, 1],
    [1, 0, 0, -1, 1],
    [-1, 1, 0, -1, 1],
    [0, 1, 0, -1, 1],
    [1, 1, 0, -1, 1],
    [-1, -1, 1, -1, 1],
    [0, -1, 1, -1, 1],
    [1, -1, 1, -1, 1],
    [-1, 0, 1, -1, 1],
    [0, 0, 1, -1, 1],
    [1, 0, 1, -1, 1],
    [-1, 1, 1, -1, 1],
    [0, 1, 1, -1, 1],
    [1, 1, 1, -1, 1],
    [-1, -1, -1, 0, 1],
    [0, -1, -1, 0, 1],
    [1, -1, -1, 0, 1],
    [-1, 0, -1, 0, 1],
    [0, 0, -1, 0, 1],
    [1, 0, -1, 0, 1],
    [-1, 1, -1, 0, 1],
    [0, 1, -1, 0, 1],
    [1, 1, -1, 0, 1],
    [-1, -1, 0, 0, 1],
    [0, -1, 0, 0, 1],
    [1, -1, 0, 0, 1],
    [-1, 0, 0, 0, 1],
    [0, 0, 0, 0, 1],
    [1, 0, 0, 0, 1],
    [-1, 1, 0, 0, 1],
    [0, 1, 0, 0, 1],
    [1, 1, 0, 0, 1],
    [-1, -1, 1, 0, 1],
    [0, -1, 1, 0, 1],
    [1, -1, 1, 0, 1],
    [-1, 0, 1, 0, 1],
    [0, 0, 1, 0, 1],
    [1, 0, 1, 0, 1],
    [-1, 1, 1, 0, 1],
    [0, 1, 1, 0, 1],
    [1, 1, 1, 0, 1],
    [-1, -1, -1, 1, 1],
    [0, -1, -1, 1, 1],
    [1, -1, -1, 1, 1],
    [-1, 0, -1, 1, 1],
    [0, 0, -1, 1, 1],
    [1, 0, -1, 1, 1],
    [-1, 1, -1, 1, 1],
    [0, 1, -1, 1, 1],
    [1, 1, -1, 1, 1],
    [-1, -1, 0, 1, 1],
    [0, -1, 0, 1, 1],
    [1, -1, 0, 1, 1],
    [-1, 0, 0, 1, 1],
    [0, 0, 0, 1, 1],
    [1, 0, 0, 1, 1],
    [-1, 1, 0, 1, 1],
    [0, 1, 0, 1, 1],
    [1, 1, 0, 1, 1],
    [-1, -1, 1, 1, 1],
    [0, -1, 1, 1, 1],
    [1, -1, 1, 1, 1],
    [-1, 0, 1, 1, 1],
    [0, 0, 1, 1, 1],
    [1, 0, 1, 1, 1],
    [-1, 1, 1, 1, 1],
    [0, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],      // =  1 + 3 + 9 + 27 + 81 = 121
    [-1, -1, -1, -1, -1], // = -1 - 3 - 9 - 27 - 81 =-121
    [0, -1, -1, -1, -1],
    [1, -1, -1, -1, -1],
    [-1, 0, -1, -1, -1],
    [0, 0, -1, -1, -1],
    [1, 0, -1, -1, -1],
    [-1, 1, -1, -1, -1],
    [0, 1, -1, -1, -1],
    [1, 1, -1, -1, -1],
    [-1, -1, 0, -1, -1],
    [0, -1, 0, -1, -1],
    [1, -1, 0, -1, -1],
    [-1, 0, 0, -1, -1],
    [0, 0, 0, -1, -1],
    [1, 0, 0, -1, -1],
    [-1, 1, 0, -1, -1],
    [0, 1, 0, -1, -1],
    [1, 1, 0, -1, -1],
    [-1, -1, 1, -1, -1],
    [0, -1, 1, -1, -1],
    [1, -1, 1, -1, -1],
    [-1, 0, 1, -1, -1],
    [0, 0, 1, -1, -1],
    [1, 0, 1, -1, -1],
    [-1, 1, 1, -1, -1],
    [0, 1, 1, -1, -1],
    [1, 1, 1, -1, -1],
    [-1, -1, -1, 0, -1],
    [0, -1, -1, 0, -1],
    [1, -1, -1, 0, -1],
    [-1, 0, -1, 0, -1],
    [0, 0, -1, 0, -1],
    [1, 0, -1, 0, -1],
    [-1, 1, -1, 0, -1],
    [0, 1, -1, 0, -1],
    [1, 1, -1, 0, -1],
    [-1, -1, 0, 0, -1],
    [0, -1, 0, 0, -1],
    [1, -1, 0, 0, -1],
    [-1, 0, 0, 0, -1],
    [0, 0, 0, 0, -1],
    [1, 0, 0, 0, -1],
    [-1, 1, 0, 0, -1],
    [0, 1, 0, 0, -1],
    [1, 1, 0, 0, -1],
    [-1, -1, 1, 0, -1],
    [0, -1, 1, 0, -1],
    [1, -1, 1, 0, -1],
    [-1, 0, 1, 0, -1],
    [0, 0, 1, 0, -1],
    [1, 0, 1, 0, -1],
    [-1, 1, 1, 0, -1],
    [0, 1, 1, 0, -1],
    [1, 1, 1, 0, -1],
    [-1, -1, -1, 1, -1],
    [0, -1, -1, 1, -1],
    [1, -1, -1, 1, -1],
    [-1, 0, -1, 1, -1],
    [0, 0, -1, 1, -1],
    [1, 0, -1, 1, -1],
    [-1, 1, -1, 1, -1],
    [0, 1, -1, 1, -1],
    [1, 1, -1, 1, -1],
    [-1, -1, 0, 1, -1],
    [0, -1, 0, 1, -1],
    [1, -1, 0, 1, -1],
    [-1, 0, 0, 1, -1],
    [0, 0, 0, 1, -1],
    [1, 0, 0, 1, -1],
    [-1, 1, 0, 1, -1],
    [0, 1, 0, 1, -1],
    [1, 1, 0, 1, -1],
    [-1, -1, 1, 1, -1],
    [0, -1, 1, 1, -1],
    [1, -1, 1, 1, -1],
    [-1, 0, 1, 1, -1],
    [0, 0, 1, 1, -1],
    [1, 0, 1, 1, -1],
    [-1, 1, 1, 1, -1],
    [0, 1, 1, 1, -1],
    [1, 1, 1, 1, -1],
    [-1, -1, -1, -1, 0],
    [0, -1, -1, -1, 0],
    [1, -1, -1, -1, 0],
    [-1, 0, -1, -1, 0],
    [0, 0, -1, -1, 0],
    [1, 0, -1, -1, 0],
    [-1, 1, -1, -1, 0],
    [0, 1, -1, -1, 0],
    [1, 1, -1, -1, 0],
    [-1, -1, 0, -1, 0],
    [0, -1, 0, -1, 0],
    [1, -1, 0, -1, 0],
    [-1, 0, 0, -1, 0],
    [0, 0, 0, -1, 0],
    [1, 0, 0, -1, 0],
    [-1, 1, 0, -1, 0],
    [0, 1, 0, -1, 0],
    [1, 1, 0, -1, 0],
    [-1, -1, 1, -1, 0],
    [0, -1, 1, -1, 0],
    [1, -1, 1, -1, 0],
    [-1, 0, 1, -1, 0],
    [0, 0, 1, -1, 0],
    [1, 0, 1, -1, 0],
    [-1, 1, 1, -1, 0],
    [0, 1, 1, -1, 0],
    [1, 1, 1, -1, 0],
    [-1, -1, -1, 0, 0],
    [0, -1, -1, 0, 0],
    [1, -1, -1, 0, 0],
    [-1, 0, -1, 0, 0],
    [0, 0, -1, 0, 0],
    [1, 0, -1, 0, 0],
    [-1, 1, -1, 0, 0],
    [0, 1, -1, 0, 0],
    [1, 1, -1, 0, 0],
    [-1, -1, 0, 0, 0],
    [0, -1, 0, 0, 0],
    [1, -1, 0, 0, 0],
    [-1, 0, 0, 0, 0],
];
